diff -ru libnl_orig/libnl-3.11.0/include/netlink/addr.h libnl-3.11.0/include/netlink/addr.h
--- libnl_orig/libnl-3.11.0/include/netlink/addr.h	2024-05-29 18:33:11.000000000 +0200
+++ libnl-3.11.0/include/netlink/addr.h	2025-09-18 13:54:49.427183982 +0200
@@ -37,8 +37,8 @@
 extern int      	nl_addr_guess_family(const struct nl_addr *);
 extern int		nl_addr_fill_sockaddr(const struct nl_addr *,
 					      struct sockaddr *, socklen_t *);
-extern int		nl_addr_info(const struct nl_addr *,
-				     struct addrinfo **);
+// extern int		nl_addr_info(const struct nl_addr *,
+				    //  struct addrinfo **);
 extern int		nl_addr_resolve(const struct nl_addr *, char *, size_t);
 
 /* Access Functions */
diff -ru libnl_orig/libnl-3.11.0/include/netlink/xfrm/sa.h libnl-3.11.0/include/netlink/xfrm/sa.h
--- libnl_orig/libnl-3.11.0/include/netlink/xfrm/sa.h	2024-05-17 21:55:49.000000000 +0200
+++ libnl-3.11.0/include/netlink/xfrm/sa.h	2025-08-21 23:25:17.251175453 +0200
@@ -176,6 +176,9 @@
 extern char*                    xfrmnl_sa_mode2str(int, char *, size_t);
 extern int                      xfrmnl_sa_str2mode(const char *);
 
+extern int xfrm_sa_msg_parser(struct nl_cache_ops *ops, struct sockaddr_nl *who,
+				struct nlmsghdr *n, struct nl_parser_param *pp);
+
 #ifdef __cplusplus
 }
 #endif
diff -ru libnl_orig/libnl-3.11.0/lib/addr.c libnl-3.11.0/lib/addr.c
--- libnl_orig/libnl-3.11.0/lib/addr.c	2024-07-19 10:59:15.000000000 +0200
+++ libnl-3.11.0/lib/addr.c	2025-09-18 14:12:26.846920917 +0200
@@ -803,36 +803,36 @@
  *
  * @return 0 on success or a negative error code.
  */
-int nl_addr_info(const struct nl_addr *addr, struct addrinfo **result)
-{
-	int err;
-	char buf[INET6_ADDRSTRLEN+5];
-	struct addrinfo hint = {
-		.ai_flags = AI_NUMERICHOST,
-		.ai_family = addr->a_family,
-	};
+// int nl_addr_info(const struct nl_addr *addr, struct addrinfo **result)
+// {
+// 	int err;
+// 	char buf[INET6_ADDRSTRLEN+5];
+// 	struct addrinfo hint = {
+// 		.ai_flags = AI_NUMERICHOST,
+// 		.ai_family = addr->a_family,
+// 	};
 
-	nl_addr2str(addr, buf, sizeof(buf));
+// 	nl_addr2str(addr, buf, sizeof(buf));
 
-	err = getaddrinfo(buf, NULL, &hint, result);
-	if (err != 0) {
-		switch (err) {
-		case EAI_ADDRFAMILY: return -NLE_AF_NOSUPPORT;
-		case EAI_AGAIN: return -NLE_AGAIN;
-		case EAI_BADFLAGS: return -NLE_INVAL;
-		case EAI_FAIL: return -NLE_NOADDR;
-		case EAI_FAMILY: return -NLE_AF_NOSUPPORT;
-		case EAI_MEMORY: return -NLE_NOMEM;
-		case EAI_NODATA: return -NLE_NOADDR;
-		case EAI_NONAME: return -NLE_OBJ_NOTFOUND;
-		case EAI_SERVICE: return -NLE_OPNOTSUPP;
-		case EAI_SOCKTYPE: return -NLE_BAD_SOCK;
-		default: return -NLE_FAILURE;
-		}
-	}
+// 	err = getaddrinfo(buf, NULL, &hint, result);
+// 	if (err != 0) {
+// 		switch (err) {
+// 		case EAI_ADDRFAMILY: return -NLE_AF_NOSUPPORT;
+// 		case EAI_AGAIN: return -NLE_AGAIN;
+// 		case EAI_BADFLAGS: return -NLE_INVAL;
+// 		case EAI_FAIL: return -NLE_NOADDR;
+// 		case EAI_FAMILY: return -NLE_AF_NOSUPPORT;
+// 		case EAI_MEMORY: return -NLE_NOMEM;
+// 		case EAI_NODATA: return -NLE_NOADDR;
+// 		case EAI_NONAME: return -NLE_OBJ_NOTFOUND;
+// 		case EAI_SERVICE: return -NLE_OPNOTSUPP;
+// 		case EAI_SOCKTYPE: return -NLE_BAD_SOCK;
+// 		default: return -NLE_FAILURE;
+// 		}
+// 	}
 
-	return 0;
-}
+// 	return 0;
+// }
 
 /**
  * Resolve abstract address object to a name using getnameinfo().
diff -ru libnl_orig/libnl-3.11.0/lib/xfrm/sa.c libnl-3.11.0/lib/xfrm/sa.c
--- libnl_orig/libnl-3.11.0/lib/xfrm/sa.c	2024-09-13 08:00:30.000000000 +0200
+++ libnl-3.11.0/lib/xfrm/sa.c	2025-08-24 15:05:13.313194679 +0200
@@ -41,6 +41,7 @@
 
 #include "nl-default.h"
 
+#include <sys/socket.h>
 #include <time.h>
 
 #include <netlink/netlink.h>
@@ -942,7 +943,7 @@
 
 	if (tb[XFRMA_COADDR]) {
 		if (!(sa->coaddr = _nl_addr_build(
-			      sa_info->family, nla_data(tb[XFRMA_COADDR]))))
+			      AF_INET6, nla_data(tb[XFRMA_COADDR]))))
 			return -NLE_NOMEM;
 		sa->ce_mask         |= XFRM_SA_ATTR_COADDR;
 	}
@@ -1090,7 +1091,7 @@
 	}
 }
 
-static int xfrm_sa_msg_parser(struct nl_cache_ops *ops, struct sockaddr_nl *who,
+int xfrm_sa_msg_parser(struct nl_cache_ops *ops, struct sockaddr_nl *who,
 				struct nlmsghdr *n, struct nl_parser_param *pp)
 {
 	struct xfrmnl_sa*       sa;
@@ -1116,7 +1117,8 @@
 	struct xfrm_usersa_id       sa_id;
 	struct xfrm_mark            mark;
 
-	if (!daddr || !spi)
+	// if (!daddr || !spi)  # PATCHED: Allow spi==0 exploit.
+	if (!daddr)
 	{
 		fprintf(stderr, "APPLICATION BUG: %s:%d:%s: A valid destination address, spi must be specified\n",
 		        __FILE__, __LINE__, __func__);
@@ -1320,7 +1322,7 @@
 	}
 
 	if (tmpl->ce_mask & XFRM_SA_ATTR_COADDR) {
-		NLA_PUT (msg, XFRMA_COADDR, sizeof (xfrm_address_t), tmpl->coaddr);
+		NLA_PUT (msg, XFRMA_COADDR, sizeof (xfrm_address_t), tmpl->coaddr->a_addr);
 	}
 
 	if (tmpl->ce_mask & XFRM_SA_ATTR_MARK) {
