
struct nlmsghdr * new_setelem_with_chain_and_expiration_msg(char *table_name, char *set_name, void *udata, uint32_t ulen, char *chain, char * key, int key_size, char *key_end, int key_end_size, int if_catchall, uint64_t expiration_time){
    struct nl_msg * msg2 = nlmsg_alloc();
    struct nlmsghdr *hdr2 = nlmsg_put(
            msg2,
            NL_AUTO_PORT, // auto assign current pid
            NL_AUTO_SEQ, // begin wit seq number 0
            (NFNL_SUBSYS_NFTABLES << 8) | (NFT_MSG_NEWSETELEM),// TYPE
            sizeof(struct nfgenmsg),
            NLM_F_REQUEST|NLM_F_CREATE
    );
    struct nfgenmsg * h2 = malloc(sizeof(struct nfgenmsg));
    h2->nfgen_family = 2;//NFPROTO_IPV4;
    h2->version = 0;
    h2->res_id = NFNL_SUBSYS_NFTABLES;
    memcpy(nlmsg_data(hdr2), h2, sizeof(struct nfgenmsg));
    
    struct nl_msg *elem = nlmsg_alloc();
    struct nl_msg *elem_nest = nlmsg_alloc();
    struct nl_msg *elem_key = nlmsg_alloc();
    struct nl_msg *elem_end = nlmsg_alloc();
    struct nl_msg *elem_data = nlmsg_alloc();
    struct nl_msg *data = nlmsg_alloc();
    struct nl_msg *data_nest = nlmsg_alloc();

    nla_put_u32(data, NFTA_VERDICT_CODE, htonl(NFT_JUMP));
    nla_put_string(data, NFTA_VERDICT_CHAIN, chain);
    nla_put_nested(data_nest, NFTA_DATA_VERDICT, data);
    nla_put_nested(elem_nest, NFTA_SET_ELEM_DATA, data_nest);
    
    nla_put_u64(elem_nest, NFTA_SET_ELEM_EXPIRATION, expiration_time);
    nla_put_u64(elem_nest, NFTA_SET_ELEM_TIMEOUT, expiration_time);
    if(if_catchall){
        nla_put_u32(elem_nest, NFTA_SET_ELEM_FLAGS, htonl(NFT_SET_ELEM_CATCHALL));
    }
    else{
        nla_put(elem_key, NFTA_DATA_VALUE, key_size, key);
        if(key_end != NULL){
            nla_put(elem_end, NFTA_DATA_VALUE, key_end_size, key_end);
            nla_put_nested(elem_nest, NFTA_SET_ELEM_KEY_END, elem_end);
        }
        nla_put_nested(elem_nest, NFTA_SET_ELEM_KEY, elem_key);
    }
    if(udata>0){
        nla_put(elem_nest, NFTA_SET_ELEM_USERDATA, ulen, udata);
    }

    nla_put_nested(elem, 1, elem_nest);

    nla_put_string(msg2, NFTA_SET_ELEM_LIST_TABLE, table_name);
    nla_put_string(msg2, NFTA_SET_ELEM_LIST_SET, set_name);
    nla_put_nested(msg2, NFTA_SET_ELEM_LIST_ELEMENTS, elem);
 
    return hdr2;   
}    

