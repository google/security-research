import gdb

'''
    Example usage:

    - Add `getchar()` in exploit.c after the rbtree state you want to debug
    - Import the plugin: `source path/to/gdb-rbtree.py`
    - Attach GDB
    - In GDB: `b init_ed`, then `c`
    - Run the exploit
    - The breakpoint is hit
    - In GDB: `set $sch=cl->sched`
    - Detach GDB
    - Now the `getchar()` part is reached in the exploit
    - Reattach GDB
    - In GDB: `prbtree $sch->eligible->rb_node`
'''

ELNODE_OFFSET = 0xa0 # For COS 105 offset is 0x98

MITIGATION_INSTANCE = 1
LTS_INSTANCE = 2

# CHANGE ME
INSTANCE = MITIGATION_INSTANCE

NODE_IDS = {
    LTS_INSTANCE : {
        0xF0 : "E"  # Evil Grandpa (&pgv - 0x10)
    },
    MITIGATION_INSTANCE : {
        0x28 : "F", # Incremented pointer (&htb->ceil.rate_bytes_ps - 8)
        0xF0 : "Q"  # Points 0x10 bytes before a Qdisc pointer (&htb->leaf.q - 0x10)
    },
}

class RBNode:
    def __init__(self, node):
        self.node = node

        self.rb_parent = self.node['__rb_parent_color']
        self.rb_left = self.node['rb_left']
        self.rb_right = self.node['rb_right']

        self.color = get_color(self.rb_parent)
        self.handle = get_handle(node)

    def detect_cycle(self):
        if int(self.node) == int(self.rb_left):
            return "L"
        elif int(self.node) == int(self.rb_right):
            return "R"

        return None

def is_valid_pointer(node):
    try:
        _ = gdb.execute(f"x/1 {node}", to_string=True)
        return True
    except Exception as err:
        return False


def get_color(node):
    if not node:
        return None

    return "üî¥" if (int(node) & 1) == 0 else "‚ö´"


def get_handle(node):
    if not is_valid_pointer(node):
        return None

    if node_id := NODE_IDS[INSTANCE].get(int(node) & 0xFF):
        return node_id

    node = int(node) - ELNODE_OFFSET
    if node & 0x1:
        node -= 1

    value = int(gdb.parse_and_eval(f"*(int *){hex(node)}"))
    up = value >> 16
    low = value & 0xFFFF

    if not up or not low or up > 8 or low > 8:
        return None

    return f"{up}:{low}"


def format_node(node):
    return get_handle(node) or ("-" if int(node) == 0 else hex(int(node)))


def traverse_tree(side, node, depth=0):
    if not is_valid_pointer(node):
        print("   " * depth + f"[{side}] -")
        return

    rb_node = RBNode(node)

    parent = format_node(rb_node.rb_parent)
    right  = format_node(rb_node.rb_right)
    left   = format_node(rb_node.rb_left)

    print("   " * depth + f"[{side}] ID: {rb_node.handle}, Addr: {node} (color={rb_node.color}), Parent: {parent}, Right: {right}, Left: {left}")

    if cycle := rb_node.detect_cycle():
        print("    " * depth + f"[{cycle}] ‚ö†Ô∏è  Warning! Cycle detected for node {node} with ID {rb_node.handle}")
        return

    traverse_tree("R", rb_node.rb_right, depth + 1)
    traverse_tree("L", rb_node.rb_left, depth + 1)


class RBTreeCommand(gdb.Command):
    def __init__(self):
        super(RBTreeCommand, self).__init__("prbtree", gdb.COMMAND_USER)

    def invoke(self, arg, from_tty):
        try:
            root = gdb.parse_and_eval(arg)
            if is_valid_pointer(root):
                traverse_tree("Root", root)
            else:
                print("Invalid root node")
        except Exception as e:
            print(f"Error: {e}")

RBTreeCommand()
