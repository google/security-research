diff --git a/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c b/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
index b19a062592b0..1d3526c751fe 100644
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
@@ -57,6 +57,10 @@
 #include <linux/pci.h>
 #include <linux/version.h>
 #include <linux/vmalloc.h>
+#include <linux/cdev.h>
+#include <linux/device.h>
+#include <linux/fs.h> /* register_chrdev, unregister_chrdev */
+#include <linux/seq_file.h> /* seq_read, seq_lseek, single_release */
 
 #define VMWGFX_DRIVER_DESC "Linux drm driver for VMware graphics devices"
 
@@ -165,6 +169,101 @@
 	DRM_IOW(DRM_COMMAND_BASE + DRM_VMW_MKSSTAT_REMOVE,	\
 		struct drm_vmw_mksstat_remove_arg)
 
+/* ----------------------------------------------
+ * 
+ * Research modifications
+ *
+ */
+
+#define NAME "vgapwn"
+static int major = -1;
+static struct cdev mycdev;
+static struct class *myclass = NULL;
+
+static struct vmw_private *dev_ref = NULL;
+
+static int show(struct seq_file *m, void *v)
+{
+    seq_printf(m, "abcd");
+    return 0;
+}
+
+static int vgapwn_open(struct inode *inode, struct file *file)
+{
+    return single_open(file, show, NULL);
+}
+
+struct vbox_command {
+    SVGA3dCmdHeader header;
+    void* command_body;
+};
+
+static ssize_t vgapwn_write(struct file * f, const char __user * buf, size_t size, loff_t * offset) {
+    if (size == 0)
+        return -EINVAL;
+
+    u8 *cmd = VMW_CMD_RESERVE(dev_ref, size);
+	if (unlikely(cmd == NULL))
+		return -ENOMEM;
+
+    if (copy_from_user(cmd, buf, size)) 
+        return -EINVAL;
+	
+    vmw_cmd_commit(dev_ref, size);
+
+    return 0;
+}
+
+static const struct file_operations fops = {
+    .llseek = seq_lseek,
+    .open = vgapwn_open,
+    .owner = THIS_MODULE,
+    .read = seq_read,
+    .write = vgapwn_write,
+    .release = single_release,
+};
+
+static void vgapwn_cleanup(int device_created)
+{
+    if (device_created) {
+        device_destroy(myclass, major);
+        cdev_del(&mycdev);
+    }
+    if (myclass)
+        class_destroy(myclass);
+    if (major != -1)
+        unregister_chrdev_region(major, 1);
+}
+
+static int vgapwn_init(struct vmw_private *dev_priv)
+{
+    dev_ref = dev_priv;
+    int device_created = 0;
+
+    /* cat /proc/devices */
+    if (alloc_chrdev_region(&major, 0, 1, NAME "_proc") < 0)
+        goto error;
+    /* ls /sys/class */
+    if ((myclass = class_create(NAME "_sys")) == NULL)
+        goto error;
+    /* ls /dev/ */
+    if (device_create(myclass, NULL, major, NULL, NAME "_dev") == NULL)
+        goto error;
+    device_created = 1;
+    cdev_init(&mycdev, &fops);
+    if (cdev_add(&mycdev, major, 1) == -1)
+        goto error;
+    return 0;
+error:
+    vgapwn_cleanup(device_created);
+    return -1;
+}
+
+/* ----------------------------------------------
+ * Modifications end
+ *
+ */
+
 /*
  * Ioctl definitions.
  */
@@ -860,6 +959,8 @@ static int vmw_driver_load(struct vmw_private *dev_priv, u32 pci_id)
 
 	vmw_sw_context_init(dev_priv);
 
+    vgapwn_init(dev_priv);
+
 	mutex_init(&dev_priv->cmdbuf_mutex);
 	mutex_init(&dev_priv->binding_mutex);
 	spin_lock_init(&dev_priv->resource_lock);
@@ -1183,6 +1284,8 @@ static void vmw_driver_unload(struct drm_device *dev)
 	struct pci_dev *pdev = to_pci_dev(dev->dev);
 	enum vmw_res_type i;
 
+    vgapwn_cleanup(1);
+
 	unregister_pm_notifier(&dev_priv->pm_nb);
 
 	vmw_sw_context_fini(dev_priv);
