#!/usr/bin/env python3
"""
Demonstration script for CVE Parser

This script creates sample data and demonstrates the CVE parser functionality.
"""

import os
import sys
from pathlib import Path
import tempfile
import shutil

# Import the test module to use sample data creation
from test_cve_parser import create_sample_dataset
from cve_parser import CVEParser


def run_demo():
    """Run a complete demonstration of the CVE parser."""
    print("=" * 60)
    print("CVE Parser Demonstration")
    print("=" * 60)
    
    # Create sample dataset
    print("\n1. Creating sample security research repository...")
    sample_dir = create_sample_dataset()
    
    # Set up output directory
    output_dir = Path("demo_output")
    if output_dir.exists():
        shutil.rmtree(output_dir)
    output_dir.mkdir()
    
    try:
        # Demo 1: Basic scan
        print("\n2. Running basic scan of all folders...")
        parser = CVEParser(str(sample_dir), str(output_dir))
        parser.scan_repository()
        
        # Generate outputs
        print("\n3. Generating output files...")
        parser.save_json("demo_all_cves.json")
        parser.save_csv("demo_all_cves.csv")
        parser.save_html_report("demo_report.html")
        
        # Show summary
        summary = parser.generate_summary_report()
        print("\n4. Scan Results Summary:")
        print(f"   Total CVE references: {summary['total_cve_references']}")
        print(f"   Unique CVEs: {summary['unique_cves']}")
        print(f"   Components analyzed: {len(summary['components'])}")
        
        print("\n   CVEs by component:")
        for component, count in sorted(summary['components'].items()):
            print(f"     {component}: {count}")
        
        # Demo 2: Targeted scan
        print("\n5. Running targeted scan (kernel and android only)...")
        parser_targeted = CVEParser(str(sample_dir), str(output_dir), folders=['kernel', 'android'])
        parser_targeted.scan_repository()
        parser_targeted.save_json("demo_kernel_android.json")
        parser_targeted.save_csv("demo_kernel_android.csv")
        
        targeted_summary = parser_targeted.generate_summary_report()
        print(f"   Targeted scan found {targeted_summary['unique_cves']} unique CVEs")
        
        # Show some sample data
        print("\n6. Sample CVE data found:")
        for i, entry in enumerate(parser.cve_data[:5]):  # Show first 5 entries
            print(f"   {i+1}. {entry['cve_id']} in {entry['component']} ({entry['file_path']})")
            if 'date' in entry:
                print(f"      Date: {entry['date']}")
        
        if len(parser.cve_data) > 5:
            print(f"   ... and {len(parser.cve_data) - 5} more entries")
        
        # List generated files
        print("\n7. Generated files:")
        for file_path in output_dir.glob("*"):
            size = file_path.stat().st_size
            print(f"   {file_path.name} ({size} bytes)")
        
        print("\n8. Demo completed successfully!")
        print(f"   Sample repository: {sample_dir}")
        print(f"   Output files: {output_dir}")
        print(f"   View the HTML report: {output_dir}/demo_report.html")
        
    except Exception as e:
        print(f"\nError during demo: {e}")
        return 1
    
    return 0


def show_usage_examples():
    """Show various usage examples of the CVE parser."""
    print("=" * 60)
    print("CVE Parser Usage Examples")
    print("=" * 60)
    
    examples = [
        {
            'title': 'Basic Usage',
            'command': 'python cve_parser.py --repo-dir ./security-research --output-dir ./output',
            'description': 'Scan all folders and generate JSON/CSV output'
        },
        {
            'title': 'Scan Specific Folders',
            'command': 'python cve_parser.py --repo-dir ./security-research --output-dir ./output --folders kernel android',
            'description': 'Only scan kernel and android folders'
        },
        {
            'title': 'Generate HTML Report',
            'command': 'python cve_parser.py --repo-dir ./security-research --output-dir ./output --html-report',
            'description': 'Include HTML summary report in output'
        },
        {
            'title': 'Custom Output Filenames',
            'command': 'python cve_parser.py --repo-dir ./security-research --output-dir ./output --json-file my_cves.json --csv-file my_cves.csv',
            'description': 'Use custom names for output files'
        },
        {
            'title': 'Complete Analysis',
            'command': 'python cve_parser.py --repo-dir ./security-research --output-dir ./analysis --folders kernel chromium android exploits --html-report',
            'description': 'Comprehensive scan with all major components and HTML report'
        }
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"\n{i}. {example['title']}")
        print(f"   Command: {example['command']}")
        print(f"   Description: {example['description']}")
    
    print("\nFor more options, run: python cve_parser.py --help")


def validate_installation():
    """Validate that the CVE parser can be imported and basic functionality works."""
    print("=" * 60)
    print("CVE Parser Installation Validation")
    print("=" * 60)
    
    try:
        # Test import
        print("✓ Importing cve_parser module...")
        from cve_parser import CVEParser
        
        # Test regex pattern
        print("✓ Testing CVE regex pattern...")
        import re
        pattern = re.compile(r'CVE-\d{4}-\d{4,7}')
        test_text = "This mentions CVE-2023-12345 and CVE-2022-98765"
        matches = pattern.findall(test_text)
        assert len(matches) == 2
        assert "CVE-2023-12345" in matches
        assert "CVE-2022-98765" in matches
        
        # Test with temporary directory
        print("✓ Testing basic functionality...")
        with tempfile.TemporaryDirectory() as temp_dir:
            test_repo = Path(temp_dir) / "repo"
            test_output = Path(temp_dir) / "output"
            test_repo.mkdir()
            
            # Test initialization
            parser = CVEParser(str(test_repo), str(test_output))
            assert parser.repo_dir == test_repo
            assert test_output.exists()
        
        print("✓ All validation tests passed!")
        print("\nThe CVE parser is ready to use.")
        
    except ImportError as e:
        print(f"✗ Import error: {e}")
        return 1
    except Exception as e:
        print(f"✗ Validation error: {e}")
        return 1
    
    return 0


def main():
    """Main demo function."""
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "--validate":
            return validate_installation()
        elif command == "--examples":
            show_usage_examples()
            return 0
        elif command == "--demo":
            return run_demo()
        elif command == "--help":
            print("Demo script for CVE Parser")
            print("\nUsage:")
            print("  python demo.py --validate   # Validate installation")
            print("  python demo.py --examples   # Show usage examples")
            print("  python demo.py --demo       # Run full demonstration")
            print("  python demo.py --help       # Show this help")
            return 0
        else:
            print(f"Unknown command: {command}")
            print("Use --help for available commands")
            return 1
    else:
        # Default action: run demo
        return run_demo()


if __name__ == "__main__":
    sys.exit(main()) 